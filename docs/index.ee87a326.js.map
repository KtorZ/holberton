{"mappings":"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","sources":["<anon>","src/app.js"],"sourcesContent":["const ENV = {};\nconst START_DATE = new Date(\"2023-12-01T14:00:00Z\");\nconst END_DATE = new Date(\"2024-07-31T16:00:00Z\");\n// Entry format:\n//\n//     {\n//       \"name\": \"Matthias\",\n//       \"address\": \"addr_test1vpy32yjqdkvmq009lfxs8hwjklcy0m4kdqtnryt0hqply0gcsr5w4\"\n//     }\n//\nconst PLAYER_NAMES = \"players.json\";\nconst STRATEGY_CONTROL = \"control\";\nconst STRATEGY_FATE = \"fate\";\nconst METADATA_LABEL = 42;\nconst TOTAL_REWARDS = 100;\nconst MAX_CONTROL = 50;\nconst SPLITTING_FACTOR = 1;\nconst ONE_SECOND = 1000; // in ms\nconst ONE_HOUR = 3600 * ONE_SECOND;\nconst REFERENCE_SLOT = {\n    date: new Date(\"2022-10-28T01:00:15Z\"),\n    slot: 259215\n};\nconst START_SLOT = getSlot(START_DATE);\nconst END_SLOT = getSlot(END_DATE);\nconst ENDPOINT = {\n    matches (addr, before) {\n        return `${ENV.API_URL}/matches/${addr}?order=most_recent_first&created_before=${before}`;\n    },\n    metadata (slot, transaction_id) {\n        return `${ENV.API_URL}/metadata/${slot}?transaction_id=${transaction_id}`;\n    }\n};\nfunction getSlot(when) {\n    const delta = when - REFERENCE_SLOT.date;\n    return Math.round(delta / 1000) + REFERENCE_SLOT.slot;\n}\nasync function getPlayers(playerNames) {\n    return Promise.all(playerNames.map(async (player)=>{\n        console.log(\"fetching...\", player);\n        const utxo = await fetch(ENDPOINT.matches(player.address, END_SLOT)).then((res)=>res.json()).then((res)=>res[0]);\n        if (utxo != null) return bindMetadata(player, utxo);\n        return Promise.resolve(player);\n    })).catch((e)=>{\n        console.warn(e);\n        return [];\n    });\n    function bindMetadata(player, utxo) {\n        const slot = utxo.created_at.slot_no;\n        const blockIndex = utxo.transaction_index;\n        return fetch(ENDPOINT.metadata(slot, utxo.transaction_id)).then((res)=>res.json()).then((metadata)=>{\n            const labels = (metadata[0] || {}).schema || {};\n            const metadatum = parseMetadatum(labels[METADATA_LABEL]);\n            if (typeof metadatum === \"object\" && metadatum != null) {\n                const { strategy , percentage  } = metadatum;\n                if (isValidStrategy(strategy) && isValidPercentage(percentage)) return {\n                    ...player,\n                    choice: {\n                        strategy,\n                        slot,\n                        blockIndex,\n                        percentage\n                    }\n                };\n            }\n            return player;\n        });\n    }\n    function isValidStrategy(strategy) {\n        return strategy === STRATEGY_FATE || strategy === STRATEGY_CONTROL;\n    }\n    function isValidPercentage(percentage) {\n        if (percentage === undefined) return true;\n        return Number.isSafeInteger(percentage) && percentage > 0 && percentage <= 100;\n    }\n}\nfunction parseMetadatum(schema) {\n    if (typeof schema === \"object\" && schema != null) {\n        if (schema.hasOwnProperty(\"int\") && typeof schema.int === \"number\") return schema.int;\n        if (schema.hasOwnProperty(\"string\") && typeof schema.string === \"string\") return schema.string;\n        if (schema.hasOwnProperty(\"bytes\") && typeof schema.bytes === \"string\") return Uint8Array.from(schema.bytes.match(/(.{2})/g).map((x)=>Number.parseInt(x, 16)));\n        if (schema.hasOwnProperty(\"list\") && Array.isArray(schema.list)) return schema.list.map(parseMetadatum);\n        if (schema.hasOwnProperty(\"map\") && Array.isArray(schema.map)) return schema.map.reduce((obj, kv)=>{\n            const k = parseMetadatum(kv.k);\n            const v = parseMetadatum(kv.v);\n            // NOTE: This silently ignore metadata with non-JSON-compatible keys,\n            // but for the sake of this program, this is fine.\n            if (typeof k === \"string\" || typeof k === \"int\") obj[k] = v;\n            return obj;\n        }, {});\n    }\n    return null;\n}\nfunction mkLeaderboard(players) {\n    const { fate , control , other  } = splitByStrategy(players);\n    const haveAbusedControl = totalControl(control) > MAX_CONTROL;\n    const scores = [];\n    const totalControlRewards = control.reduce((total, p)=>{\n        const score = haveAbusedControl ? 0 : Math.floor(TOTAL_REWARDS * p.choice.percentage / 100);\n        scores.push({\n            ...p,\n            score\n        });\n        return total += score;\n    }, 0);\n    const n = fate.length;\n    const d = fateDenominator(n);\n    const availableFateRewards = TOTAL_REWARDS - totalControlRewards;\n    fate.sort(byDescendingDate).forEach((p, i)=>{\n        const score = Math.floor(availableFateRewards * Math.pow(i + 1, SPLITTING_FACTOR) / d);\n        scores.push({\n            ...p,\n            score\n        });\n    });\n    other.forEach((p)=>scores.push({\n            ...p,\n            score: null\n        }));\n    return scores.sort(byDescendingScore).map(({ name , address , score  }, ix)=>{\n        return {\n            name,\n            address,\n            score,\n            rank: ix + 1\n        };\n    });\n    function splitByStrategy(ps) {\n        return ps.reduce((groups, p)=>{\n            const strategy = (p.choice || {}).strategy;\n            if (strategy === STRATEGY_FATE) groups.fate.push(p);\n            else if (strategy === STRATEGY_CONTROL) groups.control.push(p);\n            else groups.other.push(p);\n            return groups;\n        }, {\n            fate: [],\n            control: [],\n            other: []\n        });\n    }\n    function fateDenominator(n, splittingFactor = SPLITTING_FACTOR) {\n        let denominator = 0;\n        for(let i = 1; i <= n; i += 1)denominator += Math.pow(i, splittingFactor);\n        return denominator;\n    }\n    function totalControl(ps) {\n        return ps.reduce((total, p)=>{\n            if (p.choice != null && p.choice.strategy === STRATEGY_CONTROL) total += p.choice.percentage;\n            return total;\n        }, 0);\n    }\n    function byDescendingScore(a, b) {\n        if (a.score === b.score) return byDescendingDate(b, a);\n        else return b.score - a.score;\n    }\n    function byDescendingDate(a, b) {\n        if (a.choice == null) return 1;\n        if (b.choice == null) return -1;\n        if (a.choice.slot === b.choice.slot) return b.choice.blockIndex - a.choice.blockIndex;\n        else return b.choice.slot - a.choice.slot;\n    }\n}\nfunction viewPlayer({ name , address , score , rank  }) {\n    const hasPlayed = score !== null;\n    const wrapper = document.createElement(\"div\");\n    wrapper.innerHTML = feather.icons[hasPlayed ? \"check-circle\" : \"x-circle\"].toSvg();\n    const icon = wrapper.childNodes[0];\n    icon.classList.add(hasPlayed ? \"text-green-500\" : \"text-red-500\");\n    icon.style = \"margin-left: auto\";\n    let medal = \"\";\n    if (rank === 1) medal = \"bg-yellow-300 text-white shadow-sm\";\n    else if (rank === 2) medal = \"bg-zinc-400 text-white shadow-sm\";\n    else if (rank === 3) medal = \"bg-amber-800 text-white shadow-sm\";\n    const el = document.createElement(\"article\");\n    el.innerHTML = `<label class=\"px-6 py-3 rounded-full ${medal} text-base\">${hasPlayed ? rank : \"-\"}</label>\n    <div class=\"flex flex-col\">\n      <h3 class=\"text-base\">${name} <span class=\"hidden text-xs md:inline-block lg:text-sm\">(${address})</span></h3>\n      <span class=\"${hasPlayed ? \"\" : \"hidden\"} text-xs text-gray-500\">${score} ${score === 1 ? \"pt\" : \"pts\"}</span>\n    </div>`;\n    el.className = \"flex items-center gap-x-8\";\n    el.appendChild(icon);\n    return el;\n}\nasync function viewLeaderboard(domElement, playerNames) {\n    return getPlayers(playerNames).then((players)=>{\n        if (players.length > 0) domElement.replaceChildren(...mkLeaderboard(players).map(viewPlayer));\n    }).catch(console.warn);\n}\nfunction viewCountdown(domElement, now) {\n    if (now >= END_DATE) {\n        set(\"hours\", \"--\");\n        set(\"minutes\", \"--\");\n        set(\"seconds\", \"--\");\n    } else if (now < START_DATE) {\n        const [hours, minutes, seconds] = explode(START_DATE - now);\n        set(\"hours\", hours);\n        set(\"minutes\", minutes);\n        set(\"seconds\", seconds);\n    } else {\n        const [hours, minutes, seconds] = explode(END_DATE - now);\n        set(\"hours\", hours);\n        set(\"minutes\", minutes);\n        set(\"seconds\", seconds);\n    }\n    function set(name, value = \"--\") {\n        domElement.querySelector(`#${name}`).innerText = typeof value === \"number\" ? fmtTime(value) : value;\n    }\n    function explode(t) {\n        const hms = 3600000;\n        const h = Math.floor(t / hms);\n        const mms = 60000;\n        const m = Math.floor((t - h * hms) / mms);\n        const sms = 1000;\n        const s = Math.floor((t - h * hms - m * mms) / sms);\n        return [\n            h,\n            m,\n            s\n        ];\n    }\n    function fmtTime(t) {\n        return `00${t}`.slice(-2);\n    }\n}\nasync function withPlayerNames(cb) {\n    fetch(PLAYER_NAMES, {\n        cache: \"no-cache\"\n    }).then((res)=>res.json()).then(cb, (e)=>{\n        console.warn(\"withPlayerNames\", e);\n        cb([]);\n    });\n}\nfunction setup() {\n    while(!ENV.API_URL){\n        const cache = JSON.parse(localStorage.getItem(\"API_URL\"));\n        if (cache && cache.ttl > Date.now()) ENV.API_URL = cache.value;\n        else {\n            ENV.API_URL = prompt(\"Please indicate Kupo's server API url configured for Preview network.\");\n            localStorage.setItem(\"API_URL\", JSON.stringify({\n                value: ENV.API_URL,\n                ttl: Date.now() + ONE_HOUR\n            }));\n        }\n    }\n}\nwindow.app = async function app(leaderboard, countdown) {\n    setup();\n    setInterval(()=>viewCountdown(countdown || document.querySelector(\"#countdown\"), new Date()), ONE_SECOND);\n    withPlayerNames((playerNames)=>{\n        viewLeaderboard(leaderboard, playerNames).then(()=>setTimeout(()=>app(leaderboard), 10 * ONE_SECOND));\n    });\n};\n\n//# sourceMappingURL=index.ee87a326.js.map\n","const ENV = {};\n\nconst START_DATE = new Date(\"2023-12-01T14:00:00Z\");\nconst END_DATE = new Date(\"2024-07-31T16:00:00Z\");\n\n// Entry format:\n//\n//     {\n//       \"name\": \"Matthias\",\n//       \"address\": \"addr_test1vpy32yjqdkvmq009lfxs8hwjklcy0m4kdqtnryt0hqply0gcsr5w4\"\n//     }\n//\nconst PLAYER_NAMES = \"players.json\";\n\nconst STRATEGY_CONTROL = \"control\";\nconst STRATEGY_FATE = \"fate\";\nconst METADATA_LABEL = 42;\n\nconst TOTAL_REWARDS = 100;\nconst MAX_CONTROL = 50;\nconst SPLITTING_FACTOR = 1;\n\nconst ONE_SECOND = 1000; // in ms\nconst ONE_HOUR = 3600 * ONE_SECOND;\n\nconst REFERENCE_SLOT = { date: new Date(\"2022-10-28T01:00:15Z\"), slot: 259215 };\nconst START_SLOT = getSlot(START_DATE);\nconst END_SLOT = getSlot(END_DATE);\n\nconst ENDPOINT = {\n  matches(addr, before) {\n    return `${ENV.API_URL}/matches/${addr}?order=most_recent_first&created_before=${before}`;\n  },\n\n  metadata(slot, transaction_id) {\n    return `${ENV.API_URL}/metadata/${slot}?transaction_id=${transaction_id}`;\n  }\n}\n\nfunction getSlot(when) {\n  const delta = when - REFERENCE_SLOT.date;\n  return Math.round(delta / 1000) + REFERENCE_SLOT.slot;\n}\n\nasync function getPlayers(playerNames) {\n  return Promise.all(playerNames.map(async player => {\n    console.log('fetching...', player);\n    const utxo = await fetch(ENDPOINT.matches(player.address, END_SLOT))\n      .then(res => res.json())\n      .then(res => res[0]);\n\n    if (utxo != null) {\n      return bindMetadata(player, utxo);\n    }\n\n    return Promise.resolve(player);\n  }))\n  .catch(e => {\n    console.warn(e);\n    return [];\n  });\n\n  function bindMetadata(player, utxo) {\n    const slot = utxo.created_at.slot_no;\n    const blockIndex = utxo.transaction_index;\n\n    return fetch(ENDPOINT.metadata(slot, utxo.transaction_id))\n      .then(res => res.json())\n      .then(metadata => {\n        const labels = (metadata[0] || {}).schema || {};\n        const metadatum = parseMetadatum(labels[METADATA_LABEL]);\n\n        if (typeof metadatum === \"object\" && metadatum != null) {\n          const { strategy, percentage } = metadatum;\n\n          if (isValidStrategy(strategy) && isValidPercentage(percentage)) {\n            return { ...player, choice: { strategy, slot, blockIndex, percentage } };\n          }\n        }\n\n        return player;\n      });\n  }\n\n  function isValidStrategy(strategy) {\n    return strategy === STRATEGY_FATE || strategy === STRATEGY_CONTROL\n  }\n\n  function isValidPercentage(percentage) {\n    if (percentage === undefined) {\n      return true\n    }\n    return Number.isSafeInteger(percentage) && percentage > 0 && percentage <= 100;\n  }\n}\n\nfunction parseMetadatum(schema) {\n  if (typeof schema === \"object\" && schema != null) {\n    if (schema.hasOwnProperty(\"int\") && typeof schema.int === \"number\") {\n      return schema.int;\n    }\n\n    if (schema.hasOwnProperty(\"string\") && typeof schema.string === \"string\") {\n      return schema.string;\n    }\n\n    if (schema.hasOwnProperty(\"bytes\") && typeof schema.bytes === \"string\") {\n      return Uint8Array.from(schema.bytes.match(/(.{2})/g).map(x => Number.parseInt(x, 16)));\n    }\n\n    if (schema.hasOwnProperty(\"list\") && Array.isArray(schema.list)) {\n      return schema.list.map(parseMetadatum);\n    }\n\n    if (schema.hasOwnProperty(\"map\") && Array.isArray(schema.map)) {\n      return schema.map.reduce((obj, kv) => {\n        const k = parseMetadatum(kv.k);\n        const v = parseMetadatum(kv.v);\n\n        // NOTE: This silently ignore metadata with non-JSON-compatible keys,\n        // but for the sake of this program, this is fine.\n        if (typeof k === \"string\" || typeof k === \"int\") {\n          obj[k] = v;\n        }\n\n        return obj;\n      }, {});\n    }\n  }\n\n  return null\n}\n\nfunction mkLeaderboard(players) {\n  const { fate, control, other } = splitByStrategy(players);\n\n  const haveAbusedControl = totalControl(control) > MAX_CONTROL;\n\n  const scores = [];\n\n  const totalControlRewards = control.reduce((total, p) => {\n    const score = haveAbusedControl ? 0 : Math.floor(TOTAL_REWARDS * p.choice.percentage / 100);\n    scores.push({ ...p, score });\n    return total += score;\n  }, 0)\n\n  const n = fate.length;\n  const d = fateDenominator(n);\n  const availableFateRewards = TOTAL_REWARDS - totalControlRewards;\n  fate.sort(byDescendingDate).forEach((p, i) => {\n    const score = Math.floor(availableFateRewards * Math.pow(i + 1, SPLITTING_FACTOR) / d);\n    scores.push({ ...p, score });\n  });\n\n  other.forEach(p => scores.push({ ...p, score: null }));\n\n  return scores.sort(byDescendingScore).map(({ name, address, score }, ix) => {\n    return { name, address, score, rank: ix + 1 };\n  });\n\n  function splitByStrategy(ps) {\n    return ps.reduce((groups, p) => {\n      const strategy = (p.choice || {}).strategy;\n\n      if (strategy === STRATEGY_FATE) {\n        groups.fate.push(p);\n      } else if (strategy === STRATEGY_CONTROL) {\n        groups.control.push(p);\n      } else {\n        groups.other.push(p);\n      }\n\n      return groups;\n    }, { fate: [], control: [], other: [] })\n  }\n\n  function fateDenominator(n, splittingFactor = SPLITTING_FACTOR) {\n    let denominator = 0;\n    for (let i = 1; i <= n; i += 1) {\n      denominator += Math.pow(i, splittingFactor);\n    }\n    return denominator\n  }\n\n  function totalControl(ps) {\n    return ps.reduce((total, p) => {\n      if (p.choice != null && p.choice.strategy === STRATEGY_CONTROL) {\n        total += p.choice.percentage;\n      }\n      return total;\n    }, 0);\n  }\n\n  function byDescendingScore(a, b) {\n    if (a.score === b.score) {\n      return byDescendingDate(b, a);\n    } else {\n      return b.score - a.score;\n    }\n  }\n\n  function byDescendingDate(a, b) {\n    if (a.choice == null) {\n      return 1;\n    }\n\n    if (b.choice == null) {\n      return -1;\n    }\n\n    if (a.choice.slot === b.choice.slot) {\n      return b.choice.blockIndex - a.choice.blockIndex;\n    } else {\n      return b.choice.slot - a.choice.slot;\n    }\n  }\n}\n\nfunction viewPlayer({ name, address, score, rank }) {\n  const hasPlayed = score !== null;\n\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = feather.icons[hasPlayed ? \"check-circle\" : \"x-circle\"].toSvg();\n  const icon = wrapper.childNodes[0];\n  icon.classList.add(hasPlayed ? \"text-green-500\" : \"text-red-500\");\n  icon.style = \"margin-left: auto\";\n\n  let medal = \"\";\n  if (rank === 1) {\n    medal = \"bg-yellow-300 text-white shadow-sm\"\n  } else if (rank === 2) {\n    medal = \"bg-zinc-400 text-white shadow-sm\"\n  } else if (rank === 3) {\n    medal = \"bg-amber-800 text-white shadow-sm\"\n  }\n\n  const el = document.createElement(\"article\");\n  el.innerHTML = `<label class=\"px-6 py-3 rounded-full ${medal} text-base\">${hasPlayed ? rank : \"-\"}</label>\n    <div class=\"flex flex-col\">\n      <h3 class=\"text-base\">${name} <span class=\"hidden text-xs md:inline-block lg:text-sm\">(${address})</span></h3>\n      <span class=\"${hasPlayed ? \"\" : \"hidden\"} text-xs text-gray-500\">${score} ${score === 1 ? \"pt\" : \"pts\" }</span>\n    </div>`;\n  el.className = \"flex items-center gap-x-8\";\n  el.appendChild(icon);\n\n  return el;\n}\n\nasync function viewLeaderboard(domElement, playerNames) {\n  return getPlayers(playerNames)\n    .then(players => {\n      if (players.length > 0) {\n        domElement.replaceChildren(...mkLeaderboard(players).map(viewPlayer));\n      }\n    })\n    .catch(console.warn);\n}\n\nfunction viewCountdown(domElement, now) {\n  if (now >= END_DATE) {\n    set(\"hours\", \"--\");\n    set(\"minutes\", \"--\");\n    set(\"seconds\", \"--\");\n  } else if (now < START_DATE) {\n    const [hours, minutes, seconds] = explode(START_DATE - now);\n    set(\"hours\", hours);\n    set(\"minutes\", minutes);\n    set(\"seconds\", seconds);\n  } else {\n    const [hours, minutes, seconds] = explode(END_DATE - now);\n    set(\"hours\", hours);\n    set(\"minutes\", minutes);\n    set(\"seconds\", seconds);\n  }\n\n  function set(name, value = \"--\") {\n    domElement.querySelector(`#${name}`).innerText = typeof value === \"number\"\n      ? fmtTime(value)\n      : value;\n  }\n\n  function explode(t) {\n    const hms = 3600000;\n    const h = Math.floor(t / hms);\n\n    const mms = 60000;\n    const m = Math.floor((t - h * hms) / mms);\n\n    const sms = 1000;\n    const s = Math.floor((t - h * hms - m * mms) / sms);\n\n    return [h, m, s];\n  }\n\n  function fmtTime(t) {\n    return `00${t}`.slice(-2);\n  }\n}\n\nasync function withPlayerNames(cb) {\n  fetch(PLAYER_NAMES, { cache: \"no-cache\" })\n    .then(res => res.json())\n    .then(cb, (e) => {\n      console.warn(\"withPlayerNames\", e);\n      cb([]);\n    });\n}\n\nfunction setup() {\n  while (!ENV.API_URL) {\n    const cache = JSON.parse(localStorage.getItem(\"API_URL\"));\n    if (cache && cache.ttl > Date.now()) {\n      ENV.API_URL = cache.value;\n    } else {\n      ENV.API_URL = prompt(\"Please indicate Kupo's server API url configured for Preview network.\");\n      localStorage.setItem(\"API_URL\", JSON.stringify({ value: ENV.API_URL, ttl: Date.now() + ONE_HOUR }));\n    }\n  }\n}\n\nwindow.app = async function app(leaderboard, countdown) {\n  setup();\n\n  setInterval(() => viewCountdown(\n    countdown || document.querySelector(\"#countdown\"),\n    new Date()\n  ), ONE_SECOND);\n\n  withPlayerNames(playerNames => {\n    viewLeaderboard(leaderboard, playerNames)\n      .then(() => setTimeout(() => app(leaderboard), 10 * ONE_SECOND));\n  });\n}\n"],"names":["ENV","START_DATE","Date","END_DATE","STRATEGY_CONTROL","STRATEGY_FATE","REFERENCE_SLOT","date","slot","getSlot","END_SLOT","ENDPOINT","matches","addr","before","API_URL","metadata","transaction_id","when","delta","Math","round","getPlayers","playerNames","Promise","all","map","player","console","log","utxo","fetch","address","then","res","json","bindMetadata","created_at","slot_no","blockIndex","transaction_index","labels","schema","metadatum","parseMetadatum","hasOwnProperty","int","string","bytes","Uint8Array","from","match","x","Number","parseInt","Array","isArray","list","reduce","obj","kv","k","v","strategy","percentage","isValidStrategy","undefined","isSafeInteger","choice","resolve","catch","e","warn","viewPlayer","name","score","rank","hasPlayed","wrapper","document","createElement","innerHTML","feather","icons","toSvg","icon","childNodes","classList","add","style","medal","el","className","appendChild","viewLeaderboard","domElement","players","length","replaceChildren","mkLeaderboard","fate","control","other","ps","groups","p","push","haveAbusedControl","totalControl","total","scores","totalControlRewards","floor","TOTAL_REWARDS","n","d","fateDenominator","splittingFactor","denominator","i","pow","availableFateRewards","sort","byDescendingDate","forEach","a","b","ix","withPlayerNames","cb","cache","window","app","leaderboard","countdown","setup","JSON","parse","localStorage","getItem","ttl","now","value","prompt","setItem","stringify","setInterval","viewCountdown","set","hours","minutes","seconds","explode","querySelector","innerText","slice","t","h","m","setTimeout"],"version":3,"file":"index.ee87a326.js.map"}